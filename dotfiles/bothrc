#*******************************
# ABOUT THIS FILE
#
# sourced by both bashrc and zshrc; non-interactive shells;
# essentially, this is sourced in in *all* cases
#*******************************

set -o vi

#***************************
# BEGIN SSH Agent Stuff
#***************************
function fix_ssh_agent {
  # The workflow we're aiming for here is ssh-agent running on some
  # other computer that has been forwarded, but then it changes, and
  # we want to be able to easily pull the new agent's info into
  # running shells.
  #
  # So we have function, that we also run on new shell start, that
  # links the agent's socket to ~/.ssh-agent-sock
  #
  # First we check if we have an agent.
  if timeout 10s ssh-add -l 2>&1 | grep -q -P '^[0-9][0-9][0-9]+'
  then
    # We do have an agent!  Is it in the right place?
    if [[ ! $SSH_AUTH_SOCK =~ ssh-agent-sock ]]
    then
      # It is not; fix
      rm ~/.ssh-agent-sock
      ln -s "$SSH_AUTH_SOCK" ~/.ssh-agent-sock
    fi
  else
    # We do not have an agent; do nothing, we're about to set the
    # socket to the normal place.
    :
  fi

  # In any case, make the socket point to the standard place.
  export SSH_AUTH_SOCK=~/.ssh-agent-sock

  # Now double-check
  if ! timeout 10s ssh-add -l 2>&1 | grep -q -P '^[0-9][0-9][0-9]+'
  then
    echo "No SSH agent found, or it has no keys loaded.  You can run make_ssh_agent to fix the former, and re-run fix_ssh_agent to fix the latter."
  fi

  # Run keychain, if we have it, to add any keys we might be missing
  if [ -d ~/.ssh ] && which keychain >/dev/null 2>&1
  then
    echo "Running keychain."
    keychain --inherit any "$(cd ~/.ssh ; \ls | grep -P '(id_|github)' | grep -v pub)"
  fi
}
alias ssh_agent_fix=fix_ssh_agent
# Now run it
fix_ssh_agent

function make_ssh_agent {
  unset SSH_AUTH_SOCK
  # Start the agent if needed
  if ! timeout 10s ssh-add -l >/dev/null 2>&1 || timeout 10s ssh-add -l 2>&1 | grep -q -P '^[0-9][0-9][0-9]+'
  then
    echo "Running ssh-agent."
    agent="$(ssh-agent)"
    echo "$agent"
    eval "$agent"
  fi

  # Fix the socket
  echo ln -sf "$SSH_AUTH_SOCK" ~/.ssh-agent-sock
  ln -sf "$SSH_AUTH_SOCK" ~/.ssh-agent-sock

  fix_ssh_agent
}
alias ssh_agent_make=make_ssh_agent
#***************************
# END SSH Agent Stuff
#***************************

umask 022

stty echoe 2>/dev/null
stty -ixon 2>/dev/null
stty flush '^@' 2>/dev/null
stty start '^@' 2>/dev/null
stty stop '^@' 2>/dev/null
stty susp '^Z' 2>/dev/null

export VISUAL="/usr/bin/vim"
export EDITOR="/usr/bin/vim"

export LESSBINFMT='*d\%o'
export LESS=-eRM
export PAGER='less'
export MANPAGER='less -isR'
export MANPATH=/usr/local/man:/usr/local/share/man:$MANPATH
export TMOUT=0

# Try to sort correctly
export LANG=en_US.UTF-8
export LC_COLLATE=C

alias rm='rm -v -I'

alias svim="sudo -i \vim"

# Sorting issues
alias ls='LC_ALL=C ls -AF --color=auto'
alias sort='LC_ALL=C sort'

# Privacy issues
alias gist='gist -p'

# Spelling mistakes
alias les='less'
alias gerp=grep

# todo.sh
if ! which todo.sh >/dev/null 2>&1
then
  if [ -x ~/Dropbox/Private/todo/todo.sh ]
  then
    ln -sf ~/Dropbox/Private/todo/todo.sh ~/bin/todo.sh
  fi
fi
if which todo.sh >/dev/null 2>&1
then
  alias t=~/bin/todo.sh
  alias th='t | head -n 40'
  alias tll='t ls life'
  alias tlb='t ls buy'
  alias tlc='t ls calendar'
fi

# better default
alias tmux='TERM=xterm-256color tmux -2 -u '
alias ta='TERM=xterm-256color tmux -2 -u new-session -A -s main'

# Yay forests
ps () {
  /bin/ps --forest -f -e "$@"
}
pg () {
  /bin/ps --forest -f -e | grep "$@"
}

# stolen from cizra in #jbopre
alias g=git
alias gd='GIT_EXTERNAL_DIFF=~/bin/gwdiff g diff -w'
alias gdc='GIT_EXTERNAL_DIFF=~/bin/gwdiff g diff -w --cached'
alias gdl='g diff -w --color'
alias gdlc='g diff -w --cached --color'
alias gs='g status --short'
alias gsl='g status'
alias ga='g add'
alias gf='g fetch'
alias gr='g rebase'
alias gst='g stash'
alias gp='g pull ; g push'
alias gb='g branch'
alias gc='g commit'
alias gca='g commit -a'
alias gfa='g fetch --all -p'
# alias gcah='g commit --amend -C HEAD'  # amend the last commit keeping the same commit message
alias gl='GIT_EXTERNAL_DIFF=~/bin/gwdiff g log --follow --ext-diff'
alias glp='gl -p'
alias glg='g log --pretty=format:"%Cblue%h%Creset%x09%an%x09 %ar%x09%s" --graph'
alias gin='gl ..@{u}'  # [w]hat's [i]ncoming; useful after a gf (git fetch)
alias gout='gl @{u}..'  # what's [u]npushed; useful before a gp (git push)

# General utility git stuff
git_delete_branch () {
  git branch -d $1
  git push origin --delete $1
}
git_new_commit () {
  git commit -a ; git pull && git push
}
git_make_new_branch () {
  git checkout -b $1
  git push -u origin $1
}
git_reset_to_upstream_branch () {
  branch="$1"
  gfa
  local curbranch=$(git rev-parse --abbrev-ref HEAD)
  if ! git remote show upstream >/dev/null 2>&1
  then
    echo -e "\n\n******** You don't have an 'upstream' remote; bailing."
    return
  fi
  if [ "$curbranch" != "$branch" ]
  then
    echo -e "\n\n******** Your current branch is $curbranch, not '$branch'; enter to continue, ctrl-c to abort.  *******\n\n"
    read line
  fi
  olddir="$(git rev-parse --show-toplevel)"
  newdir="/var/tmp/$(id -un)-git-backup-$(git rev-parse --show-toplevel | tr '/' '_')--$(date +%Y-%m-%d_%H%M)"
  curbranch=$(git rev-parse --abbrev-ref HEAD)
  echo -e "\n\nBacking up current git repo ($olddir) to $newdir\n\n"
  rsync -aSHAX . "$olddir/" "$newdir/" && \
  echo -e "\n\nForcibly resetting to upstream.\n\n" && \
  git remote | grep -q upstream && git fetch --all && git reset --hard upstream/master && git push --force origin $curbranch
}
git_reset_to_upstream_master () {
  git_reset_to_upstream_branch master
}
git_force_push () {
  local curbranch=$(git rev-parse --abbrev-ref HEAD)
  echo "Pushing $curbranch to origin"
  git push --force origin $curbranch
}
git_amend_force_push () {
  local curbranch=$(git rev-parse --abbrev-ref HEAD)
  echo "Amending branch $curbranch"
  git commit --amend .
  git_force_push
}

# Text only
alias a='pt -e --hidden --ignore=.git'
alias ai='pt -e -i --hidden --ignore=.git'
alias al='pt -e -l --hidden --ignore=.git'
alias ail='pt -e -il --hidden --ignore=.git'
# # Also binary
# alias ab='ag -a --hidden'
# alias abi='ag -ai --hidden'
# alias abl='ag -al --hidden'
# alias abil='ag -ail --hidden'

# Easier lsof
alias li='sudo lsof -Pnl -i | grep LIST '
alias lsof='sudo lsof -Pnl -i '

unset RUBYOPT

if [ -x ~/bin/dropbox ]
then
  ~/bin/dropbox start
fi

if [ -f ~/.selinux_functions ]
then
  . ~/.selinux_functions
else
  sefindif() {
    echo "Go to vrici"
  }
  seshowif() {
    echo "Go to vrici"
  }
  sefinddef() {
    echo "Go to vrici" 
  }
  seshowdef() {
    echo "Go to vrici" 
  }
  sefindcon() {
    echo "Go to vrici" 
  }
  selist() {
    echo "Go to vrici" 
  }
fi

# Do RVM stuff only if it hasn't been done yet
if [ ! "$(which ruby | grep rvm)" ]
then
  # Insert the RVM path, if any, into the middle, by putting the tail
  # on, attaching RVM in front, then adding more.
  export PATH="/sbin:/bin:/usr/sbin:/usr/bin"

  # Clean out previous partial RVM stuff, if any
  if set | grep -ai '^rvm' >/dev/null 2>&1
  then
    unset $(set | grep -ai '^rvm' | sed 's/=.*//')
  fi

  if [ -s "$HOME/.rvm/scripts/rvm" ]
  then
    source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
  elif [ -s "/usr/local/rvm/scripts/rvm" ]
  then
    source "/usr/local/rvm/scripts/rvm"
  fi
else
  export PATH="$PATH:/sbin:/bin:/usr/sbin:/usr/bin"
fi

export PATH="$HOME/bin:$HOME/.local/bin:/usr/local/bin/:/usr/local/sbin:$PATH"

export LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH"

export TERM='screen-256color'

if [ -f $HOME/src/ansible/hacking/env-setup ]
then
  yes | . ~/src/ansible/hacking/env-setup -q
fi

if [ -f $HOME/.bothrc-local ]
then
  . $HOME/.bothrc-local
fi
