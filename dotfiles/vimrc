call plug#begin('~/.vim/plugged')

" Let gvim colorschemes work; not sure if we need this but can't
" hurt
Plug 'godlygeek/csapprox'

" Colorscheme
Plug 'tpope/vim-vividchalk'

" Git Wrapper; don't use it a lot, but maybe should some day
Plug 'tpope/vim-fugitive'

" extended % matching for HTML, LaTeX, and many other languages
Plug 'tmhedberg/matchit'

" Entended undo capabilities
Plug 'sjl/gundo.vim'

" Puppet syntax and stuff
Plug 'rodjek/vim-puppet'

" The Silver Searcher Searching
Plug 'rking/ag.vim'

" Bracketed Paste Mode
let g:bracketed_paste_tmux_wrap = 0
Plug 'ConradIrwin/vim-bracketed-paste'

" Tabular Alignment
Plug 'junegunn/vim-easy-align'

" Unite!  So many things!
Plug 'Shougo/unite.vim'
Plug 'Shougo/neomru.vim'
Plug 'Shougo/vimproc.vim'
Plug 'Shougo/neoyank.vim'

" tab-ish buffer list
" Plug 'weynhamz/vim-plugin-minibufexpl'
Plug 'rlpowell/vim-plugin-minibufexpl'
let g:miniBufExplShowBufNumbers = 0
let g:miniBufExplShowBufMBENumbers = 1
let g:miniBufExplShowBufMRUNumbers = 0


call plug#end()

" *********************
" BEGIN: Unite.vim
" *********************

"-----
"Unite Options
"-----

" fuzzy matching; currently not using because "foo bar" finds things
" with both foo and bar, which is more natural for me I think
"
"call unite#custom#source('file_rec,file_rec/async', 'matchers', 'matcher_fuzzy')

" Unlimit the number of files that can be found
let g:unite_source_rec_max_cache_files = 0
call unite#custom#source('file_rec,file_rec/async', 'max_candidates', 0)

" Order quick matches like tmux
let g:unite_quick_match_table =
      \ get(g:, 'unite_quick_match_table', {
      \     '1' : 0, '2' : 1, '3' : 2, '4' : 3, '5' : 4, '6' : 5, '7' : 6, '8' : 7, '9' : 8, '0' : 9,
      \     'a' : 10, 'b' : 11, 'c' : 12, 'd' : 13, 'e' : 14, 'f' : 15, 'g' : 16, 'h' : 17, 'i' : 18, 'j' : 19,
      \     'k' : 20, 'l' : 21, 'm' : 22, 'n' : 23, 'o' : 24, 'p' : 25, 'q' : 26, 'r' : 27, 's' : 28, 't' : 29,
      \ })

" Use ag (the silver searcher)
" https://github.com/ggreer/the_silver_searcher
if executable('ag')
    let g:unite_source_rec_async_command = [ 'ag', '--nocolor', '--nogroup', '-S', '--hidden', '--ignore', '.hg', '--ignore', '.svn', '--ignore', '.git', '--ignore', '.bzr', '-t', '-l', '.' ]
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '--nocolor --nogroup -S --hidden --ignore .hg --ignore .svn --ignore .git --ignore .bzr -t'
    let g:unite_source_grep_recursive_opt=''
endif

"-----
"Unite Searches
"-----

" The big one: buffers, files most recently used, all files (that last uses "ag -l")
nnoremap <Space>uf :Unite -wrap -no-split -start-insert -smartcase -unique buffer file_mru file_rec/async<CR>
nmap <Space>f <Space>uf

" Recursive grep through files using ag
nnoremap <Space>ug :Unite -no-split -start-insert -smartcase -custom-grep-search-word-highlight grep<CR>
nmap <Space>G <Space>ug

" Insert from our yank/delete history
nnoremap <Space>uP :Unite -quick-match -multi-line -no-split -default-action=insert history/yank<CR>
nmap <Space>P <Space>uP
nnoremap <Space>up :Unite -quick-match -multi-line -no-split -default-action=append history/yank<CR>
nmap <Space>p <Space>up

" Quick-match buffer selector
nnoremap <Space>ub :Unite -quick-match -no-split buffer<CR>
nmap <Space>b <Space>ub

" Quick-match most recently used files
nnoremap <Space>um :Unite -quick-match -no-split file_mru<CR>

" Search inside all buffers for things like function finding
nnoremap <Space>ul :Unite -no-split -start-insert -smartcase -custom-line-enable-highlight line:buffers<CR>

" *********************
" END: Unite.vim
" *********************

" Common keypresses that I want to be fast to hit

" Don't bind the leader because other things bind it
" let mapleader = ","

" Open a new split
nnoremap <Space>s :split<CR>

" Move around between splits
nnoremap <Space>h <C-W>h
nnoremap <Space>l <C-W>l
nnoremap <Space>j <C-W>j
nnoremap <Space>k <C-W>k

" Open various panels or whatever
nnoremap <Space>a :tabnew<CR>:Ack<Space>''<Left>

" Open a new tab
"
" No reason for this when buffer based, really; could bind it to
" :enew, but why?
" nnoremap <Space>n :tabnew<CR>

" Attempt to close the current buffer
nnoremap <Space>d :bdelete<CR>

" Aligning things in columns based on next character ; see
" https://github.com/junegunn/vim-easy-align
nmap <Space>A <Plug>(EasyAlign)
vmap <Space>A <Plug>(EasyAlign)
vmap <Enter> <Plug>(EasyAlign)

" Fugitive
nnoremap <Space>gs :Gstatus<CR>
nnoremap <Space>gc :Gcommit<CR>
nnoremap <Space>gd :Gdiff<CR><C-w>h

" These only work in visual mode
vnoremap <Space>do :diffget<CR>
vnoremap <Space>dg :diffget<CR>
vnoremap <Space>dp :diffput<CR>


"***************
" BEGIN: MiniBufExplorer configuration / tab-ish stuff
"***************
let g:miniBufExplCycleArround=1
" vertical MBE: let g:miniBufExplVSplit = 20
nnoremap < :MBEbp<CR>
nnoremap > :MBEbn<CR>

nnoremap <Space>1 :MBEGoTo 1<CR>
nnoremap <Space>2 :MBEGoTo 2<CR>
nnoremap <Space>3 :MBEGoTo 3<CR>
nnoremap <Space>4 :MBEGoTo 4<CR>
nnoremap <Space>5 :MBEGoTo 5<CR>
nnoremap <Space>6 :MBEGoTo 6<CR>
nnoremap <Space>7 :MBEGoTo 7<CR>
nnoremap <Space>8 :MBEGoTo 8<CR>
nnoremap <Space>9 :MBEGoTo 9<CR>
nnoremap <Space>0 :MBEGoTo 10<CR>

nmap <Space><Space> :MBEMRUGoTo 2<CR>
"***************
" END: MiniBufExplorer configuration / tab-ish stuff
"***************

" Double column
" nnoremap <Space>c :<C-u>let @z=&so<CR>:set so=0 noscb<CR>:bo vs<CR>Ljzt:setl scb<CR><C-w>p:setl scb<CR>:let &so=@z<CR>
" nnoremap <Space>C <C-w>o

" Should learn to use this better
nnoremap <Space>gu :GundoToggle<CR>

"The important bits:

:filetype indent on
:filetype plugin on
:set autoindent
:set nobackup
"This is the option that allows undo levels.
:set nocompatible
:set noedcompatible
:set expandtab
:set shiftwidth=2
:set smarttab
:syntax on
:set textauto
:set notextmode
:set textwidth=68
:set iskeyword+=-

" Auto-formatting (i.e. line wrapping by inserting newlines)
" options.  By default, we only auto-format comments.
:set formatoptions=c,q,r,o,n,j
" For certain things, format text too
:autocmd FileType mail set formatoptions=t,q,n
" Including unknown file types
:autocmd BufEnter * if &filetype == "" | set formatoptions=t,q,n | endif

" Colors and such
set t_Co=256
set background=dark

" See surprising whitespace
set list
set listchars=tab:!·,trail:·

colorscheme vividchalk
"*****
" vividchalk apparently has cterm as well as/rather than GUI values
"*****
" Tabline customization
highlight TabLine ctermbg=Black cterm=NONE
highlight TabLineSel ctermfg=Red
highlight TabLineFill ctermfg=Cyan ctermbg=Black cterm=NONE
" The search highlighting is a bit weak.
highlight Search ctermfg=Black ctermbg=Yellow cterm=NONE
" Comments were too dark using s:hifg from
" https://github.com/tpope/vim-vividchalk/blob/master/colors/vividchalk.vim
highlight Comment ctermfg=Magenta ctermbg=Black cterm=NONE

" *ALWAYS* highlight fixme/todo stuff
autocmd Syntax * syn match MyTodo /\v<(FIXME|NOTE|TODO)>/ containedin=.*
" This version only works in comments:
" au Syntax * syn match MyTodo /\v<(FIXME|NOTE|TODO|OPTIMIZE|XXX)>/ containedin=.*Comment,vimCommentTitle
highlight def link MyTodo Error
" Make sure we have a filetype, so it works.
autocmd BufEnter * if &filetype == "" | setlocal ft=text | endif

" Visual wrapping
:map <F3> :setl wrap<CR>
:map <F4> :setl nowrap<CR>
" While visual wrapping, do or do not break at whitespace
:map <F5> :setlocal linebreak<CR>
:map <F6> :setlocal nolinebreak<CR>

" Spell Check
:map <F7> :setlocal spell spelllang=en_us<CR>
:map <F8> :setlocal nospell<CR>

"Set up a key to toggle paste.
:map <F1> :setl paste<CR>
:map <F2> :setl nopaste<CR>
:imap <F1> <C-O>:setl paste<CR>
:imap <F2> <nop>
:setl pastetoggle=<F2>

" Center search results.  This can also be done with a let for
" scrolloff; see http://vim.wikia.com/wiki/VimTip182
:nnoremap n nzz
:nnoremap N Nzz
:nnoremap * *zz
:nnoremap # #zz
:nnoremap g* g*zz
:nnoremap g# g#zz

" diff tweaks
set diffopt=filler,iwhite
set diffexpr=MyDiff() " See below for the definition

" Turn off pretty glyphs in vim2hs
let g:haskell_conceal = 0

" Per-language special stuff
autocmd BufReadPost,FileReadPost *.pp setl filetype=puppet
autocmd BufReadPost,FileReadPost *.scm.stx setl syntax=scheme
autocmd BufReadPost,FileReadPost *.scm.stx setl filetype=scheme
autocmd BufReadPost,FileReadPost *.lisp setl lisp
autocmd BufReadPost,FileReadPost *.cl setl lisp
autocmd BufNew,BufNewFile,BufRead *.md set filetype=markdown

" Stuff that I've reviewed but do not have specific comments about

set backspace=2
set history=1024
set ruler
set hidden
set hlsearch
set undolevels=10000
if version >= 703
  set undodir=/home/tmp/rlpowell/vimundo
  set undofile
endif

" Everything below here has probably not been properly reviewed

:set nodigraph
:set directory=.,~/tmp,/var/tmp,/tmp
:set endofline
:set equalalways
:set equalprg=
:set errorbells
:set errorfile=errors
:set errorformat=\"%f\",%*[^0-9]%l\ %m
:set esckeys
:set exrc
:set nogdefault
:set nographic
:set noicon
:set noignorecase
:set noinsertmode
:set nojoinspaces
:set keywordprg=ref
:set laststatus=1
:set magic
:set makeprg=make
:set maxmem=1024
:set maxmemtot=4096
:set modeline
:set modelines=5
:set more
:set nonumber
:set paragraphs=IPLPPPQPP\ LIpplpipbp
:set nopaste
:set patchmode=
:set noreadonly
:set remap
:set report=5
:set scroll=0
:set scrolljump=1
:set sections=SHNHH\ HUnhsh
:set secure
:set shell=$SHELL
:set shellpipe=2>&1\|tee
:set shelltype=0
:set shiftround
:set noshortname
:set showcmd
:set showmode
:set sidescroll=1
:set nosmartindent
:set nosplitbelow
:set suffixes=
:set tabstop=8
:set noterse
:set notildeop
:set notimeout
:set ttimeout
":set timeoutlen=200
:set notitle
:set nottyfast
:set updatecount=200
:set updatetime=4000
:set novisualbell
:set warn
:set noweirdinvert
:set whichwrap=3
:set nowrap
:set wrapmargin=0
:set wrapscan
:set nowriteany
:set writebackup

"******************
" Large Functions Go Here
"******************

" Make diffopt iwhite actually ignore whitespace, and set it on
function! MyDiff()
   let opt = ""
   if &diffopt =~ "icase"
     let opt = opt . "-i "
   endif
   if &diffopt =~ "iwhite"
     let opt = opt . "-w "
   endif
   silent execute "!diff -a --binary " . opt . v:fname_in . " " . v:fname_new .
        \  " > " . v:fname_out
endfunction

" tabline customization function; left here in case we want to hack
" MiniBufExplorer in similar ways.
"
" " FIXME: If we want to make the below more intelligent (like "shrink
" " if necessary based on window size"),
" " https://github.com/blueyed/dotfiles/blob/master/vimrc#L396 might
" " make a good starting point (the ShortenFilename function), not
" " because we want to do the same things but just to cargo cult.
" 
" " tabline customization function; started with the JonSkanes example
" " from http://vim.wikia.com/wiki/Show_tab_number_in_your_tab_line
" " and customized further
" set showtabline=2  " 0, 1 or 2; when to use a tab pages line
" set tabline=%!MyTabLine()  " custom tab pages line
" function! MyTabLine()
"   let s = '' " complete tabline goes here
"   " loop through each tab page
"   for t in range(tabpagenr('$'))
"     " " set highlight for tab number and &modified
"     let s .= '%#TabLineFill#'
"     " set the tab page number (for mouse clicks)
"     let s .= '%' . (t + 1) . 'T'
"     " get buffer names and statuses
"     let n = ''  "temp string for buffer names while we loop and check buftype
"     let m = 0  " &modified counter
"     let bc = len(tabpagebuflist(t + 1))  "counter to avoid last ' '
"     " loop through each buffer in a tab
"     for b in tabpagebuflist(t + 1)
"       " buffer types: quickfix gets a [Q], help gets [H]{base fname}
"       " others get 1dir/2dir/3dir/fname shortened to 1/2/3/fname
"       if getbufvar( b, "&buftype" ) == 'help'
"         let n .= '[H]' . fnamemodify( bufname(b), ':t:s/.txt$//' )
"       elseif getbufvar( b, "&buftype" ) == 'quickfix'
"         let n .= '[Q]'
"       else
"         " Enforce file name maxlen
"         let bufname = bufname(b)
"         let bufname = substitute(bufname, 'manifests/', 'm/', 'g')
"         let bufname = substitute(bufname, 'modules/', 'm/', 'g')
"         let bufname = substitute(bufname, 'templates/', 'm/', 'g')
"         let bufname = substitute(bufname, 'init.pp', 'ip', 'g')
"         let bufname = substitute(bufname, 'files/', 'f/', 'g')
"         let bufname = substitute(bufname, 'lib/', 'l/', 'g')
"         let bufname = substitute(bufname, 'pages/', 'p/', 'g')
"         let bufname = substitute(bufname, 'cloud/', 'c/', 'g')
"         let n .= bufname[-30:-1]
"       endif
"       " check and ++ tab's &modified count
"       if getbufvar( b, "&modified" )
"         let m += 1
"       endif
"       " no final ' ' added...formatting looks better done later
"       if bc > 1
"         let n .= ' '
"       endif
"       let bc -= 1
"     endfor
"     " set page number string
"     let s .= 't'
"     let s .= t + 1
"     " add modified label
"     if m > 0
"       let s .= '+'
"     endif
"     let s .= ':'
"     " select the highlighting for the buffer names
"     " my default highlighting only underlines the active tab
"     " buffer names.
"     if t + 1 == tabpagenr()
"       let s .= '%#TabLineSel#'
"     else
"       let s .= '%#TabLine#'
"     endif
"     " add buffer names
"     let s .= n
"     " switch to no underlining and add final space to buffer list
"     let s .= '%#TabLineSel#' . ' '
"   endfor
"   " after the last tab fill with TabLineFill and reset tab page nr
"   let s .= '%#TabLineFill#%T'
"   " right-align the label to close the current tab page
"   if tabpagenr('$') > 1
"     let s .= '%=%#TabLineFill#%999Xclose'
"   endif
"   return s
" endfunction

" Last so we can override stuff
silent! source ~/.vimrc-local
