












#*******************************
# YOU ARE PROBABLY IN THE WRONG PLACE.  Try .bothrc
#*******************************














#*******************************
# ABOUT THIS FILE
#
# zshrc is read for interactive shells
#*******************************
#
# Generic .zshrc file for zsh 2.5
#
# .zshrc is sourced in interactive shells.  It
# should contain commands to set up aliases, functions,
# options, key bindings, etc.
#

# vi key bindings
bindkey -v

# Do lots of magic completion crap
autoload -Uz compinit
compinit

# remove bindings defined in _history_complete_word in
# /usr/share/zsh or similar
bindkey -r '\e/'
bindkey -r '\e,'

# Jump to successive begin/end line
bindkey -a '^A' beginning-of-line
bindkey -v '^A' beginning-of-line
bindkey -a '^E' end-of-line
bindkey -v '^E' end-of-line

# search path for the cd command
cdpath=(. .. ~ ~/src)

# Put information into the tmux title
# This runs before the prompt
function precmd {
  ssh-add -l >/dev/null 2>&1 || . ~/bin/agent >/dev/null 2>&1
  printf "\033]2;$(uname -n | cut -d . -f 1):$(echo $PWD | sed "s;$HOME;~;g")\033\\"
}




# bigger shell functions to autoload
autoload zed
autoload run-help

# filename completion suffixes to ignore
#fignore=(.o .c~ .old)

# hosts to use for completion
#hosts=($HOSTANME mobius07.math.uwaterloo.ca calum.csclub.uwaterloo.ca)

# set prompts
USER=$(whoami)
HOSTNAME=$(uname -n | sed 's/\..*//')
export PS1="$USER@$HOSTNAME> "
#PROMPT='%m%# '    # default prompt
#RPROMPT=' %~'     # prompt for right side of screen

MAILCHECK=300
DIRSTACKSIZE=30

# set/unset  shell options
setopt   notify globdots correct pushdtohome cdablevars autolist
setopt   sunkeyboardhack autocd recexact longlistjobs
setopt   autoresume pushdsilent noclobber
setopt   autopushd pushdminus extendedglob rcquotes mailwarning
setopt   automenu sunkeyboardhack RM_STAR_WAIT
setopt   notify
# Stop things from acting differently than sh in an important way
setopt   sh_word_split

# This is not on by default, I just want to be clear
unsetopt correctall

# So annoying
unsetopt CDABLE_VARS

# History settings
setopt INC_APPEND_HISTORY EXTENDED_HISTORY HIST_FIND_NO_DUPS HIST_EXPIRE_DUPS_FIRST
# Amount of history to save
export SAVEHIST=1000000
# Amount of history to load on start; fzf should ignore this
export HISTSIZE=10000
export HISTFILE=$HOME/.history_zsh

unsetopt rmstarsilent
unsetopt bgnice
unsetopt EXTENDED_GLOB 

# use hard limits, except for a smaller stack and no core dumps
unlimit
#limit stack 8192
#limit core 0
limit -s

if [ -e ~/.zshrc_local ]
then
	. ~/.zshrc_local
fi

if [ -e ~/.bothrc ]
then
	. ~/.bothrc
fi

export FZF_DEFAULT_OPTS='--extended'
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# We use ctrl-t already
# From "$HOME/.fzf/shell/key-bindings.zsh"
zle     -N   fzf-file-widget
bindkey '\et' fzf-file-widget

#*******************************
# BEGIN Bracketed paste support, from https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/safe-paste/safe-paste.plugin.zsh
#
# NB: LOCAL MOD: s/bindkey -e/bindkey -v/ (only one instance)
#*******************************

# Code from Mikael Magnusson: http://www.zsh.org/mla/users/2011/msg00367.html
#
# Requires xterm, urxvt, iTerm2 or any other terminal that supports bracketed
# paste mode as documented: http://www.xfree86.org/current/ctlseqs.html

# create a new keymap to use while pasting
bindkey -N paste
# make everything in this keymap call our custom widget
bindkey -R -M paste "^@"-"\M-^?" paste-insert
# these are the codes sent around the pasted text in bracketed
# paste mode.
# do the first one with both -M viins and -M vicmd in vi mode
bindkey '^[[200~' _start_paste
bindkey -M paste '^[[201~' _end_paste
# insert newlines rather than carriage returns when pasting newlines
bindkey -M paste -s '^M' '^J'

zle -N _start_paste
zle -N _end_paste
zle -N zle-line-init _zle_line_init
zle -N zle-line-finish _zle_line_finish
zle -N paste-insert _paste_insert

# switch the active keymap to paste mode
function _start_paste() {
  bindkey -A paste main
}

# go back to our normal keymap, and insert all the pasted text in the
# command line. this has the nice effect of making the whole paste be
# a single undo/redo event.
function _end_paste() {
#use bindkey -v here with vi mode probably. maybe you want to track
#if you were in ins or cmd mode and restore the right one.
  bindkey -v
  LBUFFER+=$_paste_content
  unset _paste_content
}

function _paste_insert() {
  _paste_content+=$KEYS
}

function _zle_line_init() {
  # Tell terminal to send escape codes around pastes.
  [[ $TERM == rxvt-unicode || $TERM == xterm || $TERM = xterm-256color || $TERM = screen || $TERM = screen-256color ]] && printf '\e[?2004h'
}

function _zle_line_finish() {
  # Tell it to stop when we leave zle, so pasting in other programs
  # doesn't get the ^[[200~ codes around the pasted text.
  [[ $TERM == rxvt-unicode || $TERM == xterm || $TERM = xterm-256color || $TERM = screen || $TERM = screen-256color ]] && printf '\e[?2004l'
}

#*******************************
# END Bracketed paste support, from https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/safe-paste/safe-paste.plugin.zsh
#
# NB: LOCAL MOD: s/bindkey -e/bindkey -v/ (only one instance)
#*******************************
